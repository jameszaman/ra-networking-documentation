{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This documentation has been created from the ground up by James Zaman. Applicable Ubuntu Version - 20.04 LTS All the work below are being done in a virtual environment[VMWare Workstation Pro]. Setting Up Environment Installs Make sure system is up to date. sudo apt update && sudo apt upgrade Install Basic Necessities. sudo apt install build-essential sudo apt install python python-dev sudo apt install mercurial sudo apt install bzr sudo apt install flex bison sudo apt install tcpdump sudo apt install libxml2 libxml2-dev sudo apt install git sudo apt install qt5-default sudo apt install cmake sudo apt install g++ sudo apt install libxerces-c-dev sudo apt install libfox-1.6-dev sudo apt install libgdal-dev sudo apt install libproj-dev sudo apt install libgl2ps-dev sudo apt install swig You may also try to install them in one command. But this makes it harder to identify error if any. sudo apt install --quiet build-essential python python-dev mercurial bzr flex bison tcpdump libxml2 libxml2-dev git qt5-default cmake g++ libxerces-c-dev libfox-1.6-dev libgdal-dev libproj-dev libgl2ps-dev swig Add Python alis nano ~/.bashrc After that add the following line alias python=python3 After that run the following command source ~/.bashrc Install NS3 cd ~ mkdir repos cd repos git clone https://gitlab.com/nsnam/ns-3-allinone.git cd ns-allinone ### Download NS3 ./download.py ### Build NS3 ./build.py --enable-examples --enable-tests Examples [Incomplete - Not entirely correct] cd ns-3.14 ./waf configure --enable-examples ./waf ./waf --run hello-simulator NetAnim Install cd ~/repos/ns-3-allinone/ns-3-dev qmake NetAnim.pro make Run ./NetAnim Install GNUPlot sudo apt install gnuplot Install SUMO cd ~/repos git clone --recursive https://github.com/eclipse/sumo Building SUMO mkdir sumo/build/cmake-build && cd sumo/build/cmake-build cmake ../.. make -j8 Setting Path for sumo nano ~/.bashrc export SUMO_HOME=\"$PWD/bin/sumo\" Alternative way to install SUMO(Not Tested!) Download https://sumo.dlr.de/docs/Installing.html sudo add-apt-repository ppa:sumo/stable sudo apt-get update sudo apt-get install sumo sumo-tools sumo-doc","title":"Home"},{"location":"#setting-up-environment","text":"","title":"Setting Up Environment"},{"location":"#installs","text":"","title":"Installs"},{"location":"#_1","text":"Make sure system is up to date. sudo apt update && sudo apt upgrade","title":""},{"location":"#install-basic-necessities","text":"sudo apt install build-essential sudo apt install python python-dev sudo apt install mercurial sudo apt install bzr sudo apt install flex bison sudo apt install tcpdump sudo apt install libxml2 libxml2-dev sudo apt install git sudo apt install qt5-default sudo apt install cmake sudo apt install g++ sudo apt install libxerces-c-dev sudo apt install libfox-1.6-dev sudo apt install libgdal-dev sudo apt install libproj-dev sudo apt install libgl2ps-dev sudo apt install swig You may also try to install them in one command. But this makes it harder to identify error if any. sudo apt install --quiet build-essential python python-dev mercurial bzr flex bison tcpdump libxml2 libxml2-dev git qt5-default cmake g++ libxerces-c-dev libfox-1.6-dev libgdal-dev libproj-dev libgl2ps-dev swig Add Python alis nano ~/.bashrc After that add the following line alias python=python3 After that run the following command source ~/.bashrc","title":"Install Basic Necessities."},{"location":"#install-ns3","text":"cd ~ mkdir repos cd repos git clone https://gitlab.com/nsnam/ns-3-allinone.git cd ns-allinone ### Download NS3 ./download.py ### Build NS3 ./build.py --enable-examples --enable-tests Examples [Incomplete - Not entirely correct] cd ns-3.14 ./waf configure --enable-examples ./waf ./waf --run hello-simulator NetAnim Install cd ~/repos/ns-3-allinone/ns-3-dev qmake NetAnim.pro make Run ./NetAnim","title":"Install NS3"},{"location":"#install-gnuplot","text":"sudo apt install gnuplot","title":"Install GNUPlot"},{"location":"#install-sumo","text":"cd ~/repos git clone --recursive https://github.com/eclipse/sumo","title":"Install SUMO"},{"location":"#building-sumo","text":"mkdir sumo/build/cmake-build && cd sumo/build/cmake-build cmake ../.. make -j8","title":"Building SUMO"},{"location":"#setting-path-for-sumo","text":"nano ~/.bashrc export SUMO_HOME=\"$PWD/bin/sumo\"","title":"Setting Path for sumo"},{"location":"#alternative-way-to-install-sumonot-tested","text":"","title":"Alternative way to install SUMO(Not Tested!)"},{"location":"#download","text":"https://sumo.dlr.de/docs/Installing.html sudo add-apt-repository ppa:sumo/stable sudo apt-get update sudo apt-get install sumo sumo-tools sumo-doc","title":"Download"},{"location":"ns3/","text":"All the NS3 Lab Classes. First Class Class Code #include \"ns3/core-module.h\" #include \"ns3/network-module.h\" #include \"ns3/internet-module.h\" #include \"ns3/point-to-point-module.h\" #include \"ns3/applications-module.h\" using namespace ns3; // Log Component NS_LOG_COMPONENT_DEFINE(\"FirstScrpitExample\") int main() { // Set Time Resolution Time::SetResolution(Time::NS); // Enable Log Components and set Log levels LogComponentEnable(\"UdpEchoClientApplication\", LOG_LEVEL_INFO); LogComponentEnable(\"UdpEchoServerApplication\", LOG_LEVEL_INFO); // Node Container NodeContainer nodes; nodes.create(2); // Create Channel PointToPointHelper pointToPoint; pointToPoint.setDeviceAttribute(\"DataRate\", StringVale(\"5Mbps\")); pointToPoint.setChannelAttribute(\"Delay\", StringValue(\"2ms\")); // Create Net Device and bind them to Channel NetDeviceContainer devices; devices = pointToPoint.Install(nodes); // Create InternetStack InternetStackHelper stack; // Set IP network address stack.Install(nodes); Ipv4AddressHelper address; // Assign IP to NetDevice address.SetBase(\"10.1.1.0\", \"255.255.255.0\"); Ipv4InterfaceContainer interfaces = address.Assign(devices); // Create echo server UdpEchoServerHelper echoServer(9); // Install echo server to node 1, mark it application, and set start and stop time ApplicationContainer serverApps = echoServer.Install(nodes.Get(1)); serverApps.Start(Seconds(1.0)); serverApps.Stop(Seconds(10.0)); // Create echo client and set its attributes UdpEchoClientHelper echoClient(interfaces.GetAddress(1), 9); echoClient.SetAttribute(\"MaxPackets\", UintegerValue(1)); echoClient.SetAttribute(\"Interval\", TimeValue(Seconds(1.0))); echoClient.SetAttribute(\"PacketSize\", UintegerValue(1024)); // Install echo client to node 0, mark it application, and set start and stop time ApplicationContainer clientApps = echoClient.Install(nodes.Get(0)); clientApps.Start(Seconds(2.0)); clientApps.Stop(Seconds(10.0)); Simulator::Run(); Simulator::Destroy(); return 0; } Examples #include \"ns3/core-module.h\" #include \"ns3/network-module.h\" #include \"ns3/internet-module.h\" #include \"ns3/point-to-point-module.h\" #include \"ns3/applications-module.h\" using namespace ns3; // Log Component NS_LOG_COMPONENT_DEFINE(\"FirstScrpitExample\") int main() { // Change Parameters. int packetSize = UintegerValue(1024); int packetDelay = TimeValue(Seconds(1.0)); int dataLinkRate = \"5Mbps\"; int dataLinkDelay = \"2ms\"; // Set Time Resolution Time::SetResolution(Time::NS); // Enable Log Components and set Log levels LogComponentEnable(\"UdpEchoClientApplication\", LOG_LEVEL_INFO); LogComponentEnable(\"UdpEchoServerApplication\", LOG_LEVEL_INFO); // Node Container NodeContainer nodes; nodes.create(2); // Create Channel PointToPointHelper pointToPoint; pointToPoint.setDeviceAttribute(\"DataRate\", StringVale(dataLinkRate)); pointToPoint.setChannelAttribute(\"Delay\", StringValue(dataLinkDelay)); // Create Net Device and bind them to Channel NetDeviceContainer devices; devices = pointToPoint.Install(nodes); // Create InternetStack InternetStackHelper stack; // Set IP network address stack.Install(nodes); Ipv4AddressHelper address; // Assign IP to NetDevice address.SetBase(\"10.1.1.0\", \"255.255.255.0\"); Ipv4InterfaceContainer interfaces = address.Assign(devices); // Create echo server UdpEchoServerHelper echoServer(9); // Install echo server to node 1, mark it application, and set start and stop time ApplicationContainer serverApps = echoServer.Install(nodes.Get(1)); serverApps.Start(Seconds(1.0)); serverApps.Stop(Seconds(10.0)); // Create echo client and set its attributes UdpEchoClientHelper echoClient(interfaces.GetAddress(1), 9); echoClient.SetAttribute(\"MaxPackets\", UintegerValue(1)); echoClient.SetAttribute(\"Interval\", packetDelay); echoClient.SetAttribute(\"PacketSize\", packetSize); // Install echo client to node 0, mark it application, and set start and stop time ApplicationContainer clientApps = echoClient.Install(nodes.Get(0)); clientApps.Start(Seconds(2.0)); clientApps.Stop(Seconds(10.0)); Simulator::Run(); Simulator::Destroy(); return 0; } Second Class Class Code #include \"ns3/core-module.h\" #include \"ns3/network-module.h\" #include \"ns3/internet-module.h\" #include \"ns3/point-to-point-module.h\" #include \"ns3/applications-module.h\" using namespace ns3; // Log Component NS_LOG_COMPONENT_DEFINE(\"FirstScrpitExample\") // Set Time Resolution Time::SetResolution(Time::NS); // Enable Log Components and set Log levels LogComponentEnable(\"UdpEchoClientApplication\", LOG_LEVEL_INFO); LogComponentEnable(\"UdpEchoServerApplication\", LOG_LEVEL_INFO); // Node Container NodeContainer nodes; nodes.create(2); // Create Channel PointToPointHelper pointToPoint; pointToPoint.setDeviceAttribute(\"DataRate\", StringVale(\"5Mbps\")); pointToPoint.setChannelAttribute(\"Delay\", StringValue(\"2ms\")); // Create Net Device and bind them to Channel NetDeviceContainer devices; devices = pointToPoint.Install(nodes); // Create InternetStack InternetStackHelper stack; // Set IP network address stack.Install(nodes); Ipv4AddressHelper address; // Assign IP to NetDevice address.SetBase(\"10.1.1.0\", \"255.255.255.0\"); Ipv4InterfaceContainer interfaces = address.Assign(devices); // Create echo server UdpEchoServerHelper echoServer(9); // Install echo server to node 1, mark it application, and set start and stop time ApplicationContainer serverApps = echoServer.Install(nodes.Get(1)); serverApps.Start(Seconds(1.0)); serverApps.Stop(Seconds(10.0)); // Create echo client and set its attributes UdpEchoClientHelper echoClient(interfaces.GetAddress(1), 9); echoClient.SetAttribute(\"MaxPackets\", UintegerValue(1)); echoClient.SetAttribute(\"Interval\", TimeValue(Seconds(1.0))); echoClient.SetAttribute(\"PacketSize\", UintegerValue(1024)); // Install echo client to node 0, mark it application, and set start and stop time ApplicationContainer clientApps = echoClient.Install(nodes.Get(0)); clientApps.Start(Seconds(2.0)); clientApps.Stop(Seconds(10.0)); Simulator::Run(); Simulator::Destroy(); return 0; Examples #include \"ns3/core-module.h\" #include \"ns3/network-module.h\" #include \"ns3/internet-module.h\" #include \"ns3/point-to-point-module.h\" #include \"ns3/applications-module.h\" using namespace ns3; // Log Component NS_LOG_COMPONENT_DEFINE(\"FirstScrpitExample\") // Set Time Resolution Time::SetResolution(Time::NS); // Enable Log Components and set Log levels LogComponentEnable(\"UdpEchoClientApplication\", LOG_LEVEL_INFO); LogComponentEnable(\"UdpEchoServerApplication\", LOG_LEVEL_INFO); // Node Container NodeContainer nodes; nodes.create(2); // Create Channel PointToPointHelper pointToPoint; pointToPoint.setDeviceAttribute(\"DataRate\", StringVale(\"5Mbps\")); pointToPoint.setChannelAttribute(\"Delay\", StringValue(\"2ms\")); // Create Net Device and bind them to Channel NetDeviceContainer devices; devices = pointToPoint.Install(nodes); // Create InternetStack InternetStackHelper stack; // Set IP network address stack.Install(nodes); Ipv4AddressHelper address; // Assign IP to NetDevice address.SetBase(\"10.1.1.0\", \"255.255.255.0\"); Ipv4InterfaceContainer interfaces = address.Assign(devices); // Create echo server UdpEchoServerHelper echoServer(9); // Install echo server to node 1, mark it application, and set start and stop time ApplicationContainer serverApps = echoServer.Install(nodes.Get(1)); serverApps.Start(Seconds(1.0)); serverApps.Stop(Seconds(10.0)); // Create echo client and set its attributes UdpEchoClientHelper echoClient(interfaces.GetAddress(1), 9); echoClient.SetAttribute(\"MaxPackets\", UintegerValue(1)); echoClient.SetAttribute(\"Interval\", TimeValue(Seconds(1.0))); echoClient.SetAttribute(\"PacketSize\", UintegerValue(1024)); // Install echo client to node 0, mark it application, and set start and stop time ApplicationContainer clientApps = echoClient.Install(nodes.Get(0)); clientApps.Start(Seconds(2.0)); clientApps.Stop(Seconds(10.0)); AsciiTraceHelper ascii; pointToPoint.EnableAsciiAll (ascii.CreateFileStream (\u201dmyfirst.tr\u201d)); Simulator::Run(); Simulator::Destroy(); return 0; Third Class Class Code #include \"ns3/core-module.h\" #include \"ns3/network-module.h\" #include \"ns3/csma-module.h\" #include \"ns3/internet-module.h\" #include \"ns3/point-to-point-module.h\" #include \"ns3/applications-module.h\" #include \"ns3/ipv4-global-routing-helper.h\" // Default Network Topology // // 10.1.1.0 // n0 -------------- n1 n2 n3 n4 // point-to-point | | | | // ================ // LAN 10.1.2.0 using namespace ns3; NS_LOG_COMPONENT_DEFINE (\"SecondScriptExample\"); int main (int argc, char *argv[]) { bool verbose = true; uint32_t nCsma = 3; CommandLine cmd (__FILE__); cmd.AddValue (\"nCsma\", \"Number of \\\"extra\\\" CSMA nodes/devices\", nCsma); cmd.AddValue (\"verbose\", \"Tell echo applications to log if true\", verbose); cmd.Parse (argc,argv); if (verbose) { LogComponentEnable (\"UdpEchoClientApplication\", LOG_LEVEL_INFO); LogComponentEnable (\"UdpEchoServerApplication\", LOG_LEVEL_INFO); } nCsma = nCsma == 0 ? 1 : nCsma; NodeContainer p2pNodes; p2pNodes.Create (2); NodeContainer csmaNodes; csmaNodes.Add (p2pNodes.Get (1)); csmaNodes.Create (nCsma); PointToPointHelper pointToPoint; pointToPoint.SetDeviceAttribute (\"DataRate\", StringValue (\"5Mbps\")); pointToPoint.SetChannelAttribute (\"Delay\", StringValue (\"2ms\")); NetDeviceContainer p2pDevices; p2pDevices = pointToPoint.Install (p2pNodes); CsmaHelper csma; csma.SetChannelAttribute (\"DataRate\", StringValue (\"100Mbps\")); csma.SetChannelAttribute (\"Delay\", TimeValue (NanoSeconds (6560))); NetDeviceContainer csmaDevices; csmaDevices = csma.Install (csmaNodes); InternetStackHelper stack; stack.Install (p2pNodes.Get (0)); stack.Install (csmaNodes); Ipv4AddressHelper address; address.SetBase (\"10.1.1.0\", \"255.255.255.0\"); Ipv4InterfaceContainer p2pInterfaces; p2pInterfaces = address.Assign (p2pDevices); address.SetBase (\"10.1.2.0\", \"255.255.255.0\"); Ipv4InterfaceContainer csmaInterfaces; csmaInterfaces = address.Assign (csmaDevices); UdpEchoServerHelper echoServer (9); ApplicationContainer serverApps = echoServer.Install (csmaNodes.Get (nCsma)); serverApps.Start (Seconds (1.0)); serverApps.Stop (Seconds (10.0)); UdpEchoClientHelper echoClient (csmaInterfaces.GetAddress (nCsma), 9); echoClient.SetAttribute (\"MaxPackets\", UintegerValue (1)); echoClient.SetAttribute (\"Interval\", TimeValue (Seconds (1.0))); echoClient.SetAttribute (\"PacketSize\", UintegerValue (1024)); ApplicationContainer clientApps = echoClient.Install (p2pNodes.Get (0)); clientApps.Start (Seconds (2.0)); clientApps.Stop (Seconds (10.0)); Ipv4GlobalRoutingHelper::PopulateRoutingTables (); pointToPoint.EnablePcapAll (\"second\"); csma.EnablePcap (\"second\", csmaDevices.Get (1), true); Simulator::Run (); Simulator::Destroy (); return 0; } QUESTIONS What are nCsma and verbose for? How can we set DataRate and Delay for CSMA channel? How can we set routing functionality? How can we enable pcap logging for specific devices? How can we set a promiscuos mode and why do we need it?","title":"NS3"},{"location":"ns3/#all-the-ns3-lab-classes","text":"","title":"All the NS3 Lab Classes."},{"location":"ns3/#first-class","text":"","title":"First Class"},{"location":"ns3/#class-code","text":"#include \"ns3/core-module.h\" #include \"ns3/network-module.h\" #include \"ns3/internet-module.h\" #include \"ns3/point-to-point-module.h\" #include \"ns3/applications-module.h\" using namespace ns3; // Log Component NS_LOG_COMPONENT_DEFINE(\"FirstScrpitExample\") int main() { // Set Time Resolution Time::SetResolution(Time::NS); // Enable Log Components and set Log levels LogComponentEnable(\"UdpEchoClientApplication\", LOG_LEVEL_INFO); LogComponentEnable(\"UdpEchoServerApplication\", LOG_LEVEL_INFO); // Node Container NodeContainer nodes; nodes.create(2); // Create Channel PointToPointHelper pointToPoint; pointToPoint.setDeviceAttribute(\"DataRate\", StringVale(\"5Mbps\")); pointToPoint.setChannelAttribute(\"Delay\", StringValue(\"2ms\")); // Create Net Device and bind them to Channel NetDeviceContainer devices; devices = pointToPoint.Install(nodes); // Create InternetStack InternetStackHelper stack; // Set IP network address stack.Install(nodes); Ipv4AddressHelper address; // Assign IP to NetDevice address.SetBase(\"10.1.1.0\", \"255.255.255.0\"); Ipv4InterfaceContainer interfaces = address.Assign(devices); // Create echo server UdpEchoServerHelper echoServer(9); // Install echo server to node 1, mark it application, and set start and stop time ApplicationContainer serverApps = echoServer.Install(nodes.Get(1)); serverApps.Start(Seconds(1.0)); serverApps.Stop(Seconds(10.0)); // Create echo client and set its attributes UdpEchoClientHelper echoClient(interfaces.GetAddress(1), 9); echoClient.SetAttribute(\"MaxPackets\", UintegerValue(1)); echoClient.SetAttribute(\"Interval\", TimeValue(Seconds(1.0))); echoClient.SetAttribute(\"PacketSize\", UintegerValue(1024)); // Install echo client to node 0, mark it application, and set start and stop time ApplicationContainer clientApps = echoClient.Install(nodes.Get(0)); clientApps.Start(Seconds(2.0)); clientApps.Stop(Seconds(10.0)); Simulator::Run(); Simulator::Destroy(); return 0; }","title":"Class Code"},{"location":"ns3/#examples","text":"#include \"ns3/core-module.h\" #include \"ns3/network-module.h\" #include \"ns3/internet-module.h\" #include \"ns3/point-to-point-module.h\" #include \"ns3/applications-module.h\" using namespace ns3; // Log Component NS_LOG_COMPONENT_DEFINE(\"FirstScrpitExample\") int main() { // Change Parameters. int packetSize = UintegerValue(1024); int packetDelay = TimeValue(Seconds(1.0)); int dataLinkRate = \"5Mbps\"; int dataLinkDelay = \"2ms\"; // Set Time Resolution Time::SetResolution(Time::NS); // Enable Log Components and set Log levels LogComponentEnable(\"UdpEchoClientApplication\", LOG_LEVEL_INFO); LogComponentEnable(\"UdpEchoServerApplication\", LOG_LEVEL_INFO); // Node Container NodeContainer nodes; nodes.create(2); // Create Channel PointToPointHelper pointToPoint; pointToPoint.setDeviceAttribute(\"DataRate\", StringVale(dataLinkRate)); pointToPoint.setChannelAttribute(\"Delay\", StringValue(dataLinkDelay)); // Create Net Device and bind them to Channel NetDeviceContainer devices; devices = pointToPoint.Install(nodes); // Create InternetStack InternetStackHelper stack; // Set IP network address stack.Install(nodes); Ipv4AddressHelper address; // Assign IP to NetDevice address.SetBase(\"10.1.1.0\", \"255.255.255.0\"); Ipv4InterfaceContainer interfaces = address.Assign(devices); // Create echo server UdpEchoServerHelper echoServer(9); // Install echo server to node 1, mark it application, and set start and stop time ApplicationContainer serverApps = echoServer.Install(nodes.Get(1)); serverApps.Start(Seconds(1.0)); serverApps.Stop(Seconds(10.0)); // Create echo client and set its attributes UdpEchoClientHelper echoClient(interfaces.GetAddress(1), 9); echoClient.SetAttribute(\"MaxPackets\", UintegerValue(1)); echoClient.SetAttribute(\"Interval\", packetDelay); echoClient.SetAttribute(\"PacketSize\", packetSize); // Install echo client to node 0, mark it application, and set start and stop time ApplicationContainer clientApps = echoClient.Install(nodes.Get(0)); clientApps.Start(Seconds(2.0)); clientApps.Stop(Seconds(10.0)); Simulator::Run(); Simulator::Destroy(); return 0; }","title":"Examples"},{"location":"ns3/#second-class","text":"","title":"Second Class"},{"location":"ns3/#class-code_1","text":"#include \"ns3/core-module.h\" #include \"ns3/network-module.h\" #include \"ns3/internet-module.h\" #include \"ns3/point-to-point-module.h\" #include \"ns3/applications-module.h\" using namespace ns3; // Log Component NS_LOG_COMPONENT_DEFINE(\"FirstScrpitExample\") // Set Time Resolution Time::SetResolution(Time::NS); // Enable Log Components and set Log levels LogComponentEnable(\"UdpEchoClientApplication\", LOG_LEVEL_INFO); LogComponentEnable(\"UdpEchoServerApplication\", LOG_LEVEL_INFO); // Node Container NodeContainer nodes; nodes.create(2); // Create Channel PointToPointHelper pointToPoint; pointToPoint.setDeviceAttribute(\"DataRate\", StringVale(\"5Mbps\")); pointToPoint.setChannelAttribute(\"Delay\", StringValue(\"2ms\")); // Create Net Device and bind them to Channel NetDeviceContainer devices; devices = pointToPoint.Install(nodes); // Create InternetStack InternetStackHelper stack; // Set IP network address stack.Install(nodes); Ipv4AddressHelper address; // Assign IP to NetDevice address.SetBase(\"10.1.1.0\", \"255.255.255.0\"); Ipv4InterfaceContainer interfaces = address.Assign(devices); // Create echo server UdpEchoServerHelper echoServer(9); // Install echo server to node 1, mark it application, and set start and stop time ApplicationContainer serverApps = echoServer.Install(nodes.Get(1)); serverApps.Start(Seconds(1.0)); serverApps.Stop(Seconds(10.0)); // Create echo client and set its attributes UdpEchoClientHelper echoClient(interfaces.GetAddress(1), 9); echoClient.SetAttribute(\"MaxPackets\", UintegerValue(1)); echoClient.SetAttribute(\"Interval\", TimeValue(Seconds(1.0))); echoClient.SetAttribute(\"PacketSize\", UintegerValue(1024)); // Install echo client to node 0, mark it application, and set start and stop time ApplicationContainer clientApps = echoClient.Install(nodes.Get(0)); clientApps.Start(Seconds(2.0)); clientApps.Stop(Seconds(10.0)); Simulator::Run(); Simulator::Destroy(); return 0;","title":"Class Code"},{"location":"ns3/#examples_1","text":"#include \"ns3/core-module.h\" #include \"ns3/network-module.h\" #include \"ns3/internet-module.h\" #include \"ns3/point-to-point-module.h\" #include \"ns3/applications-module.h\" using namespace ns3; // Log Component NS_LOG_COMPONENT_DEFINE(\"FirstScrpitExample\") // Set Time Resolution Time::SetResolution(Time::NS); // Enable Log Components and set Log levels LogComponentEnable(\"UdpEchoClientApplication\", LOG_LEVEL_INFO); LogComponentEnable(\"UdpEchoServerApplication\", LOG_LEVEL_INFO); // Node Container NodeContainer nodes; nodes.create(2); // Create Channel PointToPointHelper pointToPoint; pointToPoint.setDeviceAttribute(\"DataRate\", StringVale(\"5Mbps\")); pointToPoint.setChannelAttribute(\"Delay\", StringValue(\"2ms\")); // Create Net Device and bind them to Channel NetDeviceContainer devices; devices = pointToPoint.Install(nodes); // Create InternetStack InternetStackHelper stack; // Set IP network address stack.Install(nodes); Ipv4AddressHelper address; // Assign IP to NetDevice address.SetBase(\"10.1.1.0\", \"255.255.255.0\"); Ipv4InterfaceContainer interfaces = address.Assign(devices); // Create echo server UdpEchoServerHelper echoServer(9); // Install echo server to node 1, mark it application, and set start and stop time ApplicationContainer serverApps = echoServer.Install(nodes.Get(1)); serverApps.Start(Seconds(1.0)); serverApps.Stop(Seconds(10.0)); // Create echo client and set its attributes UdpEchoClientHelper echoClient(interfaces.GetAddress(1), 9); echoClient.SetAttribute(\"MaxPackets\", UintegerValue(1)); echoClient.SetAttribute(\"Interval\", TimeValue(Seconds(1.0))); echoClient.SetAttribute(\"PacketSize\", UintegerValue(1024)); // Install echo client to node 0, mark it application, and set start and stop time ApplicationContainer clientApps = echoClient.Install(nodes.Get(0)); clientApps.Start(Seconds(2.0)); clientApps.Stop(Seconds(10.0)); AsciiTraceHelper ascii; pointToPoint.EnableAsciiAll (ascii.CreateFileStream (\u201dmyfirst.tr\u201d)); Simulator::Run(); Simulator::Destroy(); return 0;","title":"Examples"},{"location":"ns3/#third-class","text":"","title":"Third Class"},{"location":"ns3/#class-code_2","text":"#include \"ns3/core-module.h\" #include \"ns3/network-module.h\" #include \"ns3/csma-module.h\" #include \"ns3/internet-module.h\" #include \"ns3/point-to-point-module.h\" #include \"ns3/applications-module.h\" #include \"ns3/ipv4-global-routing-helper.h\" // Default Network Topology // // 10.1.1.0 // n0 -------------- n1 n2 n3 n4 // point-to-point | | | | // ================ // LAN 10.1.2.0 using namespace ns3; NS_LOG_COMPONENT_DEFINE (\"SecondScriptExample\"); int main (int argc, char *argv[]) { bool verbose = true; uint32_t nCsma = 3; CommandLine cmd (__FILE__); cmd.AddValue (\"nCsma\", \"Number of \\\"extra\\\" CSMA nodes/devices\", nCsma); cmd.AddValue (\"verbose\", \"Tell echo applications to log if true\", verbose); cmd.Parse (argc,argv); if (verbose) { LogComponentEnable (\"UdpEchoClientApplication\", LOG_LEVEL_INFO); LogComponentEnable (\"UdpEchoServerApplication\", LOG_LEVEL_INFO); } nCsma = nCsma == 0 ? 1 : nCsma; NodeContainer p2pNodes; p2pNodes.Create (2); NodeContainer csmaNodes; csmaNodes.Add (p2pNodes.Get (1)); csmaNodes.Create (nCsma); PointToPointHelper pointToPoint; pointToPoint.SetDeviceAttribute (\"DataRate\", StringValue (\"5Mbps\")); pointToPoint.SetChannelAttribute (\"Delay\", StringValue (\"2ms\")); NetDeviceContainer p2pDevices; p2pDevices = pointToPoint.Install (p2pNodes); CsmaHelper csma; csma.SetChannelAttribute (\"DataRate\", StringValue (\"100Mbps\")); csma.SetChannelAttribute (\"Delay\", TimeValue (NanoSeconds (6560))); NetDeviceContainer csmaDevices; csmaDevices = csma.Install (csmaNodes); InternetStackHelper stack; stack.Install (p2pNodes.Get (0)); stack.Install (csmaNodes); Ipv4AddressHelper address; address.SetBase (\"10.1.1.0\", \"255.255.255.0\"); Ipv4InterfaceContainer p2pInterfaces; p2pInterfaces = address.Assign (p2pDevices); address.SetBase (\"10.1.2.0\", \"255.255.255.0\"); Ipv4InterfaceContainer csmaInterfaces; csmaInterfaces = address.Assign (csmaDevices); UdpEchoServerHelper echoServer (9); ApplicationContainer serverApps = echoServer.Install (csmaNodes.Get (nCsma)); serverApps.Start (Seconds (1.0)); serverApps.Stop (Seconds (10.0)); UdpEchoClientHelper echoClient (csmaInterfaces.GetAddress (nCsma), 9); echoClient.SetAttribute (\"MaxPackets\", UintegerValue (1)); echoClient.SetAttribute (\"Interval\", TimeValue (Seconds (1.0))); echoClient.SetAttribute (\"PacketSize\", UintegerValue (1024)); ApplicationContainer clientApps = echoClient.Install (p2pNodes.Get (0)); clientApps.Start (Seconds (2.0)); clientApps.Stop (Seconds (10.0)); Ipv4GlobalRoutingHelper::PopulateRoutingTables (); pointToPoint.EnablePcapAll (\"second\"); csma.EnablePcap (\"second\", csmaDevices.Get (1), true); Simulator::Run (); Simulator::Destroy (); return 0; } QUESTIONS What are nCsma and verbose for? How can we set DataRate and Delay for CSMA channel? How can we set routing functionality? How can we enable pcap logging for specific devices? How can we set a promiscuos mode and why do we need it?","title":"Class Code"}]}