{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This documentation has been created from the ground up by James Zaman. Applicable Ubuntu Version - 20.04 LTS All the work below are being done in a virtual environment[VMWare Workstation Pro]. Setting Up Environment Install Basic Necessities. sudo apt install build-essential sudo apt install python python-dev sudo apt install mercurial sudo apt install bzr sudo apt install flex bison sudo apt install tcpdump sudo apt install libxml2 libxml2-dev sudo apt install git sudo apt install qt5-default sudo apt install cmake sudo apt install g++ sudo apt install libxerces-c-dev sudo apt install libfox-1.6-dev sudo apt install libgdal-dev sudo apt install libproj-dev sudo apt install libgl2ps-dev sudo apt install swig You may also try to install them in one command. But this makes it harder to identify error if any. sudo apt install --quiet build-essential python python-dev mercurial bzr flex bison tcpdump libxml2 libxml2-dev git qt5-default cmake g++ libxerces-c-dev libfox-1.6-dev libgdal-dev libproj-dev libgl2ps-dev swig Add Python alis nano ~/.bashrc After that add the following line alias python=python3 After that run the following command source ~/.bashrc Install NS3 Install Core Dependencies sudo apt install build-essential libsqlite3-dev libboost-all-dev libssl-dev git python3-setuptools castxml Install Dependencies for NS-3 Python bindings sudo apt install gir1.2-goocanvas-2.0 sudo apt install gir1.2-gtk-3.0 sudo apt install libgirepository1.0-dev sudo apt install python3-dev sudo apt install python3-gi sudo apt install python3-gi-cairo sudo apt install python3-pip sudo apt install python3-pygraphviz sudo apt install python3-pygccxml Install Dependencies for NS-3 sudo apt install g++ sudo apt install pkg-config sudo apt install sqlite3 sudo apt install qt5-default sudo apt install mercurial sudo apt install ipython3 sudo apt install openmpi-bin sudo apt install openmpi-common sudo apt install openmpi-doc sudo apt install libopenmpi-dev sudo apt install autoconf sudo apt install cvs sudo apt install bzr sudo apt install unrar sudo apt install gdb sudo apt install valgrind sudo apt install uncrustify sudo apt install doxygen sudo apt install graphviz sudo apt install imagemagick sudo apt install python3-sphinx sudo apt install dia sudo apt install tcpdump sudo apt install libxml2 sudo apt install libxml2-dev sudo apt install cmake sudo apt install libc6-dev sudo apt install libc6-dev-i386 sudo apt install libclang-6.0-dev sudo apt install llvm-6.0-dev sudo apt install automake Install Additional Python Packages sudo su cd pip3 install kiwi exit cd Download and Install NS-3 and NetAnim # download from ns-3 server wget -c https://www.nsnam.org/releases/ns-allinone-3.29.tar.bz2 # extract tar.bz2 tar -xvjf ns-allinone-3.29.tar.bz2 # go back to home folder cd # navigate to ns-3 directory (not the NS-3 all in one) cd ns-allinone-3.29/ns-3.29/ # Configure the installation ./waf configure --enable-examples # Build ns-3 installation ./waf # to check whether installation was a success ./waf --run hello-simulator # navigate to netanim dir. cd ns-allinone-3.29/netanim-3.108/ # configure the build make clean # compile the build qmake NetAnim.pro # build netanim installation make # to execute NetAnim ./NetAnim Install NS3 [Alternative, Not Recommended] cd ~ mkdir repos cd repos git clone https://gitlab.com/nsnam/ns-3-allinone.git cd ns-allinone ### Download NS3 ./download.py ### Build NS3 ./build.py --enable-examples --enable-tests Examples [Incomplete - Not entirely correct] cd ns-3.14 ./waf configure --enable-examples ./waf ./waf --run hello-simulator NetAnim Install cd ~/repos/ns-3-allinone/ns-3-dev qmake NetAnim.pro make Run ./NetAnim Install GNUPlot sudo apt install gnuplot Install SUMO cd ~/repos git clone --recursive https://github.com/eclipse/sumo Building SUMO mkdir sumo/build/cmake-build && cd sumo/build/cmake-build cmake ../.. make -j8 Setting Path for sumo nano ~/.bashrc export SUMO_HOME=\"$PWD/bin/sumo\" Alternative way to install SUMO(Not Tested!) Download https://sumo.dlr.de/docs/Installing.html sudo add-apt-repository ppa:sumo/stable sudo apt-get update sudo apt-get install sumo sumo-tools sumo-doc","title":"Home"},{"location":"#setting-up-environment","text":"","title":"Setting Up Environment"},{"location":"#install-basic-necessities","text":"sudo apt install build-essential sudo apt install python python-dev sudo apt install mercurial sudo apt install bzr sudo apt install flex bison sudo apt install tcpdump sudo apt install libxml2 libxml2-dev sudo apt install git sudo apt install qt5-default sudo apt install cmake sudo apt install g++ sudo apt install libxerces-c-dev sudo apt install libfox-1.6-dev sudo apt install libgdal-dev sudo apt install libproj-dev sudo apt install libgl2ps-dev sudo apt install swig You may also try to install them in one command. But this makes it harder to identify error if any. sudo apt install --quiet build-essential python python-dev mercurial bzr flex bison tcpdump libxml2 libxml2-dev git qt5-default cmake g++ libxerces-c-dev libfox-1.6-dev libgdal-dev libproj-dev libgl2ps-dev swig Add Python alis nano ~/.bashrc After that add the following line alias python=python3 After that run the following command source ~/.bashrc","title":"Install Basic Necessities."},{"location":"#install-ns3","text":"","title":"Install NS3"},{"location":"#install-core-dependencies","text":"sudo apt install build-essential libsqlite3-dev libboost-all-dev libssl-dev git python3-setuptools castxml","title":"Install Core Dependencies"},{"location":"#install-dependencies-for-ns-3-python-bindings","text":"sudo apt install gir1.2-goocanvas-2.0 sudo apt install gir1.2-gtk-3.0 sudo apt install libgirepository1.0-dev sudo apt install python3-dev sudo apt install python3-gi sudo apt install python3-gi-cairo sudo apt install python3-pip sudo apt install python3-pygraphviz sudo apt install python3-pygccxml","title":"Install Dependencies for NS-3 Python bindings"},{"location":"#install-dependencies-for-ns-3","text":"sudo apt install g++ sudo apt install pkg-config sudo apt install sqlite3 sudo apt install qt5-default sudo apt install mercurial sudo apt install ipython3 sudo apt install openmpi-bin sudo apt install openmpi-common sudo apt install openmpi-doc sudo apt install libopenmpi-dev sudo apt install autoconf sudo apt install cvs sudo apt install bzr sudo apt install unrar sudo apt install gdb sudo apt install valgrind sudo apt install uncrustify sudo apt install doxygen sudo apt install graphviz sudo apt install imagemagick sudo apt install python3-sphinx sudo apt install dia sudo apt install tcpdump sudo apt install libxml2 sudo apt install libxml2-dev sudo apt install cmake sudo apt install libc6-dev sudo apt install libc6-dev-i386 sudo apt install libclang-6.0-dev sudo apt install llvm-6.0-dev sudo apt install automake","title":"Install Dependencies for NS-3"},{"location":"#install-additional-python-packages","text":"sudo su cd pip3 install kiwi exit cd","title":"Install Additional Python Packages"},{"location":"#download-and-install-ns-3-and-netanim","text":"# download from ns-3 server wget -c https://www.nsnam.org/releases/ns-allinone-3.29.tar.bz2 # extract tar.bz2 tar -xvjf ns-allinone-3.29.tar.bz2 # go back to home folder cd # navigate to ns-3 directory (not the NS-3 all in one) cd ns-allinone-3.29/ns-3.29/ # Configure the installation ./waf configure --enable-examples # Build ns-3 installation ./waf # to check whether installation was a success ./waf --run hello-simulator # navigate to netanim dir. cd ns-allinone-3.29/netanim-3.108/ # configure the build make clean # compile the build qmake NetAnim.pro # build netanim installation make # to execute NetAnim ./NetAnim","title":"Download and Install NS-3 and NetAnim"},{"location":"#install-ns3-alternative-not-recommended","text":"cd ~ mkdir repos cd repos git clone https://gitlab.com/nsnam/ns-3-allinone.git cd ns-allinone ### Download NS3 ./download.py ### Build NS3 ./build.py --enable-examples --enable-tests Examples [Incomplete - Not entirely correct] cd ns-3.14 ./waf configure --enable-examples ./waf ./waf --run hello-simulator NetAnim Install cd ~/repos/ns-3-allinone/ns-3-dev qmake NetAnim.pro make Run ./NetAnim","title":"Install NS3 [Alternative, Not Recommended]"},{"location":"#install-gnuplot","text":"sudo apt install gnuplot","title":"Install GNUPlot"},{"location":"#install-sumo","text":"cd ~/repos git clone --recursive https://github.com/eclipse/sumo","title":"Install SUMO"},{"location":"#building-sumo","text":"mkdir sumo/build/cmake-build && cd sumo/build/cmake-build cmake ../.. make -j8","title":"Building SUMO"},{"location":"#setting-path-for-sumo","text":"nano ~/.bashrc export SUMO_HOME=\"$PWD/bin/sumo\"","title":"Setting Path for sumo"},{"location":"#alternative-way-to-install-sumonot-tested","text":"","title":"Alternative way to install SUMO(Not Tested!)"},{"location":"#download","text":"https://sumo.dlr.de/docs/Installing.html sudo add-apt-repository ppa:sumo/stable sudo apt-get update sudo apt-get install sumo sumo-tools sumo-doc","title":"Download"},{"location":"install/","text":"Setting up environment All Downloads. First need to download VMWare workstation pro. Click Here or use the link below. https://download3.vmware.com/software/WKST-1624-WIN/VMware-workstation-full-16.2.4-20089737.exe We also need to install Linux 20.04. To install it on a virtual machine, we will be using a .iso file. To download the .iso file Click Here or use the link below. https://releases.ubuntu.com/20.04/ubuntu-20.04.4-desktop-amd64.iso Installing VMWare. Press Next Agree to terms and click Next . Select where to install and Next . Untick both options and click Next . At least choose Start Menu Program Folder and Desktop is optional if you want a desktop shortcut. Make sure to click License and not Finish! Use this Licencse: ZF3R0-FHED2-M80TY-8QYGC-NPKYF and press Enter. Click Finish. Congratulations. You have successfully installed VMWare workstation PRO. Installing Ubuntu. Press Create a New Virtual Machine. Select typical and press Next Make sure to select I will install the operating system later. and click next . Choose the following options and press Next Guest Operating System: \"Linux\" Version: \"Ubuntu\" Give a proper name, and choose where to install. Make sure to choose an empty folder for installation. After that press Next Make sure to select Store virtual disk as a single file and the required Maximum disk size. For our task 20GB should be enough, but select more if you wish to. Something like this should be shown. Press Finish. A new virtual environment should be ready and can be see on the left side. Select it and press Edit virtual machine settings. Select CD/DVD (SATA) and choose Use ISO image file . After that browse and select the Ubuntu .iso file downloaded before. Press OK after that. While the virtual machine is selected, click the green Power on this virtual machine Wait for it to load first. After that select English as the language and press Install Ubuntu . Again select English for keyboard and continue After that make sure to select these options and press continue Select Erase disk and install Ubuntu , and press Install Now . You do not have to worry, if you are installing in an empty folder, nothing to be worried about. A popup will be shown. Press Continue , if you are installing in a new folder, nothing to worry about. Select your location, and press Continue Set credentials and press Continue . You should make sure to remember the credentials. You may use an easy credentials as you will be typing it again and again. When setup is complete, remove the .iso file from the current location to another location or delete it completely. After that press Restart Now Press Skip Press Next Select No, don't send system info , and press next Press Next Press Done Press Install Now , and wait for it to complete. It will take some time for it to complete. You can see the progress on the left of your screen. You will be asked to give your password to install necessary updates. Congratulations! You have successfully installed Linux in your virtual machine.","title":"Install"},{"location":"install/#setting-up-environment","text":"","title":"Setting up environment"},{"location":"install/#all-downloads","text":"First need to download VMWare workstation pro. Click Here or use the link below. https://download3.vmware.com/software/WKST-1624-WIN/VMware-workstation-full-16.2.4-20089737.exe We also need to install Linux 20.04. To install it on a virtual machine, we will be using a .iso file. To download the .iso file Click Here or use the link below. https://releases.ubuntu.com/20.04/ubuntu-20.04.4-desktop-amd64.iso","title":"All Downloads."},{"location":"install/#installing-vmware","text":"","title":"Installing VMWare."},{"location":"install/#press-next","text":"","title":"Press Next"},{"location":"install/#agree-to-terms-and-click-next","text":"","title":"Agree to terms and click Next."},{"location":"install/#select-where-to-install-and-next","text":"","title":"Select where to install and Next."},{"location":"install/#untick-both-options-and-click-next","text":"","title":"Untick both options and click Next."},{"location":"install/#at-least-choose-start-menu-program-folder-and-desktop-is-optional-if-you-want-a-desktop-shortcut","text":"","title":"At least choose Start Menu Program Folder and Desktop is optional if you want a desktop shortcut."},{"location":"install/#make-sure-to-click-license-and-not-finish","text":"","title":"Make sure to click License and not Finish!"},{"location":"install/#use-this-licencse-zf3r0-fhed2-m80ty-8qygc-npkyf-and-press-enter","text":"","title":"Use this Licencse: ZF3R0-FHED2-M80TY-8QYGC-NPKYF and press Enter."},{"location":"install/#click-finish","text":"","title":"Click Finish."},{"location":"install/#congratulations-you-have-successfully-installed-vmware-workstation-pro","text":"","title":"Congratulations. You have successfully installed VMWare workstation PRO."},{"location":"install/#installing-ubuntu","text":"","title":"Installing Ubuntu."},{"location":"install/#press-create-a-new-virtual-machine","text":"","title":"Press Create a New Virtual Machine."},{"location":"install/#select-typical-and-press-next","text":"","title":"Select typical and press Next"},{"location":"install/#make-sure-to-select-i-will-install-the-operating-system-later-and-click-next","text":"","title":"Make sure to select I will install the operating system later. and click next."},{"location":"install/#choose-the-following-options-and-press-next","text":"Guest Operating System: \"Linux\" Version: \"Ubuntu\"","title":"Choose the following options and press Next"},{"location":"install/#give-a-proper-name-and-choose-where-to-install-make-sure-to-choose-an-empty-folder-for-installation-after-that-press-next","text":"","title":"Give a proper name, and choose where to install.  Make sure to choose an empty folder for installation.  After that press Next"},{"location":"install/#make-sure-to-select-store-virtual-disk-as-a-single-file-and-the-required-maximum-disk-size-for-our-task-20gb-should-be-enough-but-select-more-if-you-wish-to","text":"","title":"Make sure to select Store virtual disk as a single file and the required Maximum disk size. For our task 20GB should be enough, but select more if you wish to."},{"location":"install/#something-like-this-should-be-shown-press-finish","text":"","title":"Something like this should be shown. Press Finish."},{"location":"install/#a-new-virtual-environment-should-be-ready-and-can-be-see-on-the-left-side-select-it-and-press-edit-virtual-machine-settings","text":"","title":"A new virtual environment should be ready and can be see on the left side. Select it and press Edit virtual machine settings."},{"location":"install/#select-cddvd-sata-and-choose-use-iso-image-file-after-that-browse-and-select-the-ubuntu-iso-file-downloaded-before-press-ok-after-that","text":"","title":"Select CD/DVD (SATA) and choose Use ISO image file. After that browse and select the Ubuntu .iso file downloaded before. Press OK after that."},{"location":"install/#while-the-virtual-machine-is-selected-click-the-green-power-on-this-virtual-machine","text":"","title":"While the virtual machine is selected, click the green Power on this virtual machine"},{"location":"install/#wait-for-it-to-load-first-after-that-select-english-as-the-language-and-press-install-ubuntu","text":"","title":"Wait for it to load first. After that select English as the language and press Install Ubuntu."},{"location":"install/#again-select-english-for-keyboard-and-continue","text":"","title":"Again select English for keyboard and continue"},{"location":"install/#after-that-make-sure-to-select-these-options-and-press-continue","text":"","title":"After that make sure to select these options and press continue"},{"location":"install/#select-erase-disk-and-install-ubuntu-and-press-install-now-you-do-not-have-to-worry-if-you-are-installing-in-an-empty-folder-nothing-to-be-worried-about","text":"","title":"Select Erase disk and install Ubuntu, and press Install Now. You do not have to worry, if you are installing in an empty folder, nothing to be worried about."},{"location":"install/#a-popup-will-be-shown-press-continue-if-you-are-installing-in-a-new-folder-nothing-to-worry-about","text":"","title":"A popup will be shown. Press Continue, if you are installing in a new folder, nothing to worry about."},{"location":"install/#select-your-location-and-press-continue","text":"","title":"Select your location, and press Continue"},{"location":"install/#set-credentials-and-press-continue-you-should-make-sure-to-remember-the-credentials-you-may-use-an-easy-credentials-as-you-will-be-typing-it-again-and-again","text":"","title":"Set credentials and press Continue. You should make sure to remember the credentials. You may use an easy credentials as you will be typing it again and again."},{"location":"install/#when-setup-is-complete-remove-the-iso-file-from-the-current-location-to-another-location-or-delete-it-completely-after-that-press-restart-now","text":"","title":"When setup is complete, remove the .iso file from the current location to another location or delete it completely. After that press Restart Now"},{"location":"install/#press-skip","text":"","title":"Press Skip"},{"location":"install/#press-next_1","text":"","title":"Press Next"},{"location":"install/#select-no-dont-send-system-info-and-press-next","text":"","title":"Select No, don't send system info, and press next"},{"location":"install/#press-next_2","text":"","title":"Press Next"},{"location":"install/#press-done","text":"","title":"Press Done"},{"location":"install/#press-install-now-and-wait-for-it-to-complete-it-will-take-some-time-for-it-to-complete-you-can-see-the-progress-on-the-left-of-your-screen","text":"You will be asked to give your password to install necessary updates.","title":"Press Install Now, and wait for it to complete. It will take some time for it to complete. You can see the progress on the left of your screen."},{"location":"install/#congratulations-you-have-successfully-installed-linux-in-your-virtual-machine","text":"","title":"Congratulations! You have successfully installed Linux in your virtual machine."},{"location":"ns3/","text":"This documentation is created for the purpose of helping new learners learn about NS3 and its uses. All the NS3 Lab Classes. First Class Class Code #include \"ns3/core-module.h\" #include \"ns3/network-module.h\" #include \"ns3/internet-module.h\" #include \"ns3/point-to-point-module.h\" #include \"ns3/applications-module.h\" using namespace ns3; // Log Component NS_LOG_COMPONENT_DEFINE(\"FirstScrpitExample\") int main() { // Set Time Resolution Time::SetResolution(Time::NS); // Enable Log Components and set Log levels LogComponentEnable(\"UdpEchoClientApplication\", LOG_LEVEL_INFO); LogComponentEnable(\"UdpEchoServerApplication\", LOG_LEVEL_INFO); // Node Container NodeContainer nodes; nodes.Create(2); // Create Channel PointToPointHelper pointToPoint; pointToPoint.SetDeviceAttribute(\"DataRate\", StringValue(\"5Mbps\")); pointToPoint.SetChannelAttribute(\"Delay\", StringValue(\"2ms\")); // Create Net Device and bind them to Channel NetDeviceContainer devices; devices = pointToPoint.Install(nodes); // Create InternetStack InternetStackHelper stack; // Set IP network address stack.Install(nodes); Ipv4AddressHelper address; // Assign IP to NetDevice address.SetBase(\"10.1.1.0\", \"255.255.255.0\"); Ipv4InterfaceContainer interfaces = address.Assign(devices); // Create echo server UdpEchoServerHelper echoServer(9); // Install echo server to node 1, mark it application, and set start and stop time ApplicationContainer serverApps = echoServer.Install(nodes.Get(1)); serverApps.Start(Seconds(1.0)); serverApps.Stop(Seconds(10.0)); // Create echo client and set its attributes UdpEchoClientHelper echoClient(interfaces.GetAddress(1), 9); echoClient.SetAttribute(\"MaxPackets\", UintegerValue(1)); echoClient.SetAttribute(\"Interval\", TimeValue(Seconds(1.0))); echoClient.SetAttribute(\"PacketSize\", UintegerValue(1024)); // Install echo client to node 0, mark it application, and set start and stop time ApplicationContainer clientApps = echoClient.Install(nodes.Get(0)); clientApps.Start(Seconds(2.0)); clientApps.Stop(Seconds(10.0)); Simulator::Run(); Simulator::Destroy(); return 0; } Examples #include \"ns3/core-module.h\" #include \"ns3/network-module.h\" #include \"ns3/internet-module.h\" #include \"ns3/point-to-point-module.h\" #include \"ns3/applications-module.h\" using namespace ns3; // Log Component NS_LOG_COMPONENT_DEFINE(\"FirstScrpitExample\"); int main() { // Change Parameters. auto packetSize = UintegerValue(1024); auto packetDelay = TimeValue(Seconds(1.0)); auto dataLinkRate = \"5Mbps\"; auto dataLinkDelay = \"2ms\"; // Set Time Resolution Time::SetResolution(Time::NS); // Enable Log Components and set Log levels LogComponentEnable(\"UdpEchoClientApplication\", LOG_LEVEL_INFO); LogComponentEnable(\"UdpEchoServerApplication\", LOG_LEVEL_INFO); // Node Container NodeContainer nodes; nodes.Create(2); // Create Channel PointToPointHelper pointToPoint; pointToPoint.SetDeviceAttribute(\"DataRate\", StringValue(dataLinkRate)); pointToPoint.SetChannelAttribute(\"Delay\", StringValue(dataLinkDelay)); // Create Net Device and bind them to Channel NetDeviceContainer devices; devices = pointToPoint.Install(nodes); // Create InternetStack InternetStackHelper stack; // Set IP network address stack.Install(nodes); Ipv4AddressHelper address; // Assign IP to NetDevice address.SetBase(\"10.1.1.0\", \"255.255.255.0\"); Ipv4InterfaceContainer interfaces = address.Assign(devices); // Create echo server UdpEchoServerHelper echoServer(9); // Install echo server to node 1, mark it application, and set start and stop time ApplicationContainer serverApps = echoServer.Install(nodes.Get(1)); serverApps.Start(Seconds(1.0)); serverApps.Stop(Seconds(10.0)); // Create echo client and set its attributes UdpEchoClientHelper echoClient(interfaces.GetAddress(1), 9); echoClient.SetAttribute(\"MaxPackets\", UintegerValue(1)); echoClient.SetAttribute(\"Interval\", packetDelay); echoClient.SetAttribute(\"PacketSize\", packetSize); // Install echo client to node 0, mark it application, and set start and stop time ApplicationContainer clientApps = echoClient.Install(nodes.Get(0)); clientApps.Start(Seconds(2.0)); clientApps.Stop(Seconds(10.0)); Simulator::Run(); Simulator::Destroy(); return 0; } Second Class Class Code #include \"ns3/core-module.h\" #include \"ns3/network-module.h\" #include \"ns3/internet-module.h\" #include \"ns3/point-to-point-module.h\" #include \"ns3/applications-module.h\" using namespace ns3; // Log Component NS_LOG_COMPONENT_DEFINE(\"FirstScrpitExample\") // Set Time Resolution Time::SetResolution(Time::NS); // Enable Log Components and set Log levels LogComponentEnable(\"UdpEchoClientApplication\", LOG_LEVEL_INFO); LogComponentEnable(\"UdpEchoServerApplication\", LOG_LEVEL_INFO); // Node Container NodeContainer nodes; nodes.create(2); // Create Channel PointToPointHelper pointToPoint; pointToPoint.setDeviceAttribute(\"DataRate\", StringVale(\"5Mbps\")); pointToPoint.setChannelAttribute(\"Delay\", StringValue(\"2ms\")); // Create Net Device and bind them to Channel NetDeviceContainer devices; devices = pointToPoint.Install(nodes); // Create InternetStack InternetStackHelper stack; // Set IP network address stack.Install(nodes); Ipv4AddressHelper address; // Assign IP to NetDevice address.SetBase(\"10.1.1.0\", \"255.255.255.0\"); Ipv4InterfaceContainer interfaces = address.Assign(devices); // Create echo server UdpEchoServerHelper echoServer(9); // Install echo server to node 1, mark it application, and set start and stop time ApplicationContainer serverApps = echoServer.Install(nodes.Get(1)); serverApps.Start(Seconds(1.0)); serverApps.Stop(Seconds(10.0)); // Create echo client and set its attributes UdpEchoClientHelper echoClient(interfaces.GetAddress(1), 9); echoClient.SetAttribute(\"MaxPackets\", UintegerValue(1)); echoClient.SetAttribute(\"Interval\", TimeValue(Seconds(1.0))); echoClient.SetAttribute(\"PacketSize\", UintegerValue(1024)); // Install echo client to node 0, mark it application, and set start and stop time ApplicationContainer clientApps = echoClient.Install(nodes.Get(0)); clientApps.Start(Seconds(2.0)); clientApps.Stop(Seconds(10.0)); Simulator::Run(); Simulator::Destroy(); return 0; Examples #include \"ns3/core-module.h\" #include \"ns3/network-module.h\" #include \"ns3/internet-module.h\" #include \"ns3/point-to-point-module.h\" #include \"ns3/applications-module.h\" using namespace ns3; // Log Component NS_LOG_COMPONENT_DEFINE(\"FirstScrpitExample\") // Set Time Resolution Time::SetResolution(Time::NS); // Enable Log Components and set Log levels LogComponentEnable(\"UdpEchoClientApplication\", LOG_LEVEL_INFO); LogComponentEnable(\"UdpEchoServerApplication\", LOG_LEVEL_INFO); // Node Container NodeContainer nodes; nodes.create(2); // Create Channel PointToPointHelper pointToPoint; pointToPoint.setDeviceAttribute(\"DataRate\", StringVale(\"5Mbps\")); pointToPoint.setChannelAttribute(\"Delay\", StringValue(\"2ms\")); // Create Net Device and bind them to Channel NetDeviceContainer devices; devices = pointToPoint.Install(nodes); // Create InternetStack InternetStackHelper stack; // Set IP network address stack.Install(nodes); Ipv4AddressHelper address; // Assign IP to NetDevice address.SetBase(\"10.1.1.0\", \"255.255.255.0\"); Ipv4InterfaceContainer interfaces = address.Assign(devices); // Create echo server UdpEchoServerHelper echoServer(9); // Install echo server to node 1, mark it application, and set start and stop time ApplicationContainer serverApps = echoServer.Install(nodes.Get(1)); serverApps.Start(Seconds(1.0)); serverApps.Stop(Seconds(10.0)); // Create echo client and set its attributes UdpEchoClientHelper echoClient(interfaces.GetAddress(1), 9); echoClient.SetAttribute(\"MaxPackets\", UintegerValue(1)); echoClient.SetAttribute(\"Interval\", TimeValue(Seconds(1.0))); echoClient.SetAttribute(\"PacketSize\", UintegerValue(1024)); // Install echo client to node 0, mark it application, and set start and stop time ApplicationContainer clientApps = echoClient.Install(nodes.Get(0)); clientApps.Start(Seconds(2.0)); clientApps.Stop(Seconds(10.0)); AsciiTraceHelper ascii; pointToPoint.EnableAsciiAll (ascii.CreateFileStream (\u201dmyfirst.tr\u201d)); Simulator::Run(); Simulator::Destroy(); return 0; Third Class Class Code #include \"ns3/core-module.h\" #include \"ns3/network-module.h\" #include \"ns3/csma-module.h\" #include \"ns3/internet-module.h\" #include \"ns3/point-to-point-module.h\" #include \"ns3/applications-module.h\" #include \"ns3/ipv4-global-routing-helper.h\" // Default Network Topology // // 10.1.1.0 // n0 -------------- n1 n2 n3 n4 // point-to-point | | | | // ================ // LAN 10.1.2.0 using namespace ns3; NS_LOG_COMPONENT_DEFINE (\"SecondScriptExample\"); int main (int argc, char *argv[]) { bool verbose = true; uint32_t nCsma = 3; CommandLine cmd (__FILE__); cmd.AddValue (\"nCsma\", \"Number of \\\"extra\\\" CSMA nodes/devices\", nCsma); cmd.AddValue (\"verbose\", \"Tell echo applications to log if true\", verbose); cmd.Parse (argc,argv); if (verbose) { LogComponentEnable (\"UdpEchoClientApplication\", LOG_LEVEL_INFO); LogComponentEnable (\"UdpEchoServerApplication\", LOG_LEVEL_INFO); } nCsma = nCsma == 0 ? 1 : nCsma; NodeContainer p2pNodes; p2pNodes.Create (2); NodeContainer csmaNodes; csmaNodes.Add (p2pNodes.Get (1)); csmaNodes.Create (nCsma); PointToPointHelper pointToPoint; pointToPoint.SetDeviceAttribute (\"DataRate\", StringValue (\"5Mbps\")); pointToPoint.SetChannelAttribute (\"Delay\", StringValue (\"2ms\")); NetDeviceContainer p2pDevices; p2pDevices = pointToPoint.Install (p2pNodes); CsmaHelper csma; csma.SetChannelAttribute (\"DataRate\", StringValue (\"100Mbps\")); csma.SetChannelAttribute (\"Delay\", TimeValue (NanoSeconds (6560))); NetDeviceContainer csmaDevices; csmaDevices = csma.Install (csmaNodes); InternetStackHelper stack; stack.Install (p2pNodes.Get (0)); stack.Install (csmaNodes); Ipv4AddressHelper address; address.SetBase (\"10.1.1.0\", \"255.255.255.0\"); Ipv4InterfaceContainer p2pInterfaces; p2pInterfaces = address.Assign (p2pDevices); address.SetBase (\"10.1.2.0\", \"255.255.255.0\"); Ipv4InterfaceContainer csmaInterfaces; csmaInterfaces = address.Assign (csmaDevices); UdpEchoServerHelper echoServer (9); ApplicationContainer serverApps = echoServer.Install (csmaNodes.Get (nCsma)); serverApps.Start (Seconds (1.0)); serverApps.Stop (Seconds (10.0)); UdpEchoClientHelper echoClient (csmaInterfaces.GetAddress (nCsma), 9); echoClient.SetAttribute (\"MaxPackets\", UintegerValue (1)); echoClient.SetAttribute (\"Interval\", TimeValue (Seconds (1.0))); echoClient.SetAttribute (\"PacketSize\", UintegerValue (1024)); ApplicationContainer clientApps = echoClient.Install (p2pNodes.Get (0)); clientApps.Start (Seconds (2.0)); clientApps.Stop (Seconds (10.0)); Ipv4GlobalRoutingHelper::PopulateRoutingTables (); pointToPoint.EnablePcapAll (\"second\"); csma.EnablePcap (\"second\", csmaDevices.Get (1), true); Simulator::Run (); Simulator::Destroy (); return 0; } QUESTIONS What are nCsma and verbose for? How can we set DataRate and Delay for CSMA channel? How can we set routing functionality? How can we enable pcap logging for specific devices? How can we set a promiscuos mode and why do we need it?","title":"NS3"},{"location":"ns3/#all-the-ns3-lab-classes","text":"","title":"All the NS3 Lab Classes."},{"location":"ns3/#first-class","text":"","title":"First Class"},{"location":"ns3/#class-code","text":"#include \"ns3/core-module.h\" #include \"ns3/network-module.h\" #include \"ns3/internet-module.h\" #include \"ns3/point-to-point-module.h\" #include \"ns3/applications-module.h\" using namespace ns3; // Log Component NS_LOG_COMPONENT_DEFINE(\"FirstScrpitExample\") int main() { // Set Time Resolution Time::SetResolution(Time::NS); // Enable Log Components and set Log levels LogComponentEnable(\"UdpEchoClientApplication\", LOG_LEVEL_INFO); LogComponentEnable(\"UdpEchoServerApplication\", LOG_LEVEL_INFO); // Node Container NodeContainer nodes; nodes.Create(2); // Create Channel PointToPointHelper pointToPoint; pointToPoint.SetDeviceAttribute(\"DataRate\", StringValue(\"5Mbps\")); pointToPoint.SetChannelAttribute(\"Delay\", StringValue(\"2ms\")); // Create Net Device and bind them to Channel NetDeviceContainer devices; devices = pointToPoint.Install(nodes); // Create InternetStack InternetStackHelper stack; // Set IP network address stack.Install(nodes); Ipv4AddressHelper address; // Assign IP to NetDevice address.SetBase(\"10.1.1.0\", \"255.255.255.0\"); Ipv4InterfaceContainer interfaces = address.Assign(devices); // Create echo server UdpEchoServerHelper echoServer(9); // Install echo server to node 1, mark it application, and set start and stop time ApplicationContainer serverApps = echoServer.Install(nodes.Get(1)); serverApps.Start(Seconds(1.0)); serverApps.Stop(Seconds(10.0)); // Create echo client and set its attributes UdpEchoClientHelper echoClient(interfaces.GetAddress(1), 9); echoClient.SetAttribute(\"MaxPackets\", UintegerValue(1)); echoClient.SetAttribute(\"Interval\", TimeValue(Seconds(1.0))); echoClient.SetAttribute(\"PacketSize\", UintegerValue(1024)); // Install echo client to node 0, mark it application, and set start and stop time ApplicationContainer clientApps = echoClient.Install(nodes.Get(0)); clientApps.Start(Seconds(2.0)); clientApps.Stop(Seconds(10.0)); Simulator::Run(); Simulator::Destroy(); return 0; }","title":"Class Code"},{"location":"ns3/#examples","text":"#include \"ns3/core-module.h\" #include \"ns3/network-module.h\" #include \"ns3/internet-module.h\" #include \"ns3/point-to-point-module.h\" #include \"ns3/applications-module.h\" using namespace ns3; // Log Component NS_LOG_COMPONENT_DEFINE(\"FirstScrpitExample\"); int main() { // Change Parameters. auto packetSize = UintegerValue(1024); auto packetDelay = TimeValue(Seconds(1.0)); auto dataLinkRate = \"5Mbps\"; auto dataLinkDelay = \"2ms\"; // Set Time Resolution Time::SetResolution(Time::NS); // Enable Log Components and set Log levels LogComponentEnable(\"UdpEchoClientApplication\", LOG_LEVEL_INFO); LogComponentEnable(\"UdpEchoServerApplication\", LOG_LEVEL_INFO); // Node Container NodeContainer nodes; nodes.Create(2); // Create Channel PointToPointHelper pointToPoint; pointToPoint.SetDeviceAttribute(\"DataRate\", StringValue(dataLinkRate)); pointToPoint.SetChannelAttribute(\"Delay\", StringValue(dataLinkDelay)); // Create Net Device and bind them to Channel NetDeviceContainer devices; devices = pointToPoint.Install(nodes); // Create InternetStack InternetStackHelper stack; // Set IP network address stack.Install(nodes); Ipv4AddressHelper address; // Assign IP to NetDevice address.SetBase(\"10.1.1.0\", \"255.255.255.0\"); Ipv4InterfaceContainer interfaces = address.Assign(devices); // Create echo server UdpEchoServerHelper echoServer(9); // Install echo server to node 1, mark it application, and set start and stop time ApplicationContainer serverApps = echoServer.Install(nodes.Get(1)); serverApps.Start(Seconds(1.0)); serverApps.Stop(Seconds(10.0)); // Create echo client and set its attributes UdpEchoClientHelper echoClient(interfaces.GetAddress(1), 9); echoClient.SetAttribute(\"MaxPackets\", UintegerValue(1)); echoClient.SetAttribute(\"Interval\", packetDelay); echoClient.SetAttribute(\"PacketSize\", packetSize); // Install echo client to node 0, mark it application, and set start and stop time ApplicationContainer clientApps = echoClient.Install(nodes.Get(0)); clientApps.Start(Seconds(2.0)); clientApps.Stop(Seconds(10.0)); Simulator::Run(); Simulator::Destroy(); return 0; }","title":"Examples"},{"location":"ns3/#second-class","text":"","title":"Second Class"},{"location":"ns3/#class-code_1","text":"#include \"ns3/core-module.h\" #include \"ns3/network-module.h\" #include \"ns3/internet-module.h\" #include \"ns3/point-to-point-module.h\" #include \"ns3/applications-module.h\" using namespace ns3; // Log Component NS_LOG_COMPONENT_DEFINE(\"FirstScrpitExample\") // Set Time Resolution Time::SetResolution(Time::NS); // Enable Log Components and set Log levels LogComponentEnable(\"UdpEchoClientApplication\", LOG_LEVEL_INFO); LogComponentEnable(\"UdpEchoServerApplication\", LOG_LEVEL_INFO); // Node Container NodeContainer nodes; nodes.create(2); // Create Channel PointToPointHelper pointToPoint; pointToPoint.setDeviceAttribute(\"DataRate\", StringVale(\"5Mbps\")); pointToPoint.setChannelAttribute(\"Delay\", StringValue(\"2ms\")); // Create Net Device and bind them to Channel NetDeviceContainer devices; devices = pointToPoint.Install(nodes); // Create InternetStack InternetStackHelper stack; // Set IP network address stack.Install(nodes); Ipv4AddressHelper address; // Assign IP to NetDevice address.SetBase(\"10.1.1.0\", \"255.255.255.0\"); Ipv4InterfaceContainer interfaces = address.Assign(devices); // Create echo server UdpEchoServerHelper echoServer(9); // Install echo server to node 1, mark it application, and set start and stop time ApplicationContainer serverApps = echoServer.Install(nodes.Get(1)); serverApps.Start(Seconds(1.0)); serverApps.Stop(Seconds(10.0)); // Create echo client and set its attributes UdpEchoClientHelper echoClient(interfaces.GetAddress(1), 9); echoClient.SetAttribute(\"MaxPackets\", UintegerValue(1)); echoClient.SetAttribute(\"Interval\", TimeValue(Seconds(1.0))); echoClient.SetAttribute(\"PacketSize\", UintegerValue(1024)); // Install echo client to node 0, mark it application, and set start and stop time ApplicationContainer clientApps = echoClient.Install(nodes.Get(0)); clientApps.Start(Seconds(2.0)); clientApps.Stop(Seconds(10.0)); Simulator::Run(); Simulator::Destroy(); return 0;","title":"Class Code"},{"location":"ns3/#examples_1","text":"#include \"ns3/core-module.h\" #include \"ns3/network-module.h\" #include \"ns3/internet-module.h\" #include \"ns3/point-to-point-module.h\" #include \"ns3/applications-module.h\" using namespace ns3; // Log Component NS_LOG_COMPONENT_DEFINE(\"FirstScrpitExample\") // Set Time Resolution Time::SetResolution(Time::NS); // Enable Log Components and set Log levels LogComponentEnable(\"UdpEchoClientApplication\", LOG_LEVEL_INFO); LogComponentEnable(\"UdpEchoServerApplication\", LOG_LEVEL_INFO); // Node Container NodeContainer nodes; nodes.create(2); // Create Channel PointToPointHelper pointToPoint; pointToPoint.setDeviceAttribute(\"DataRate\", StringVale(\"5Mbps\")); pointToPoint.setChannelAttribute(\"Delay\", StringValue(\"2ms\")); // Create Net Device and bind them to Channel NetDeviceContainer devices; devices = pointToPoint.Install(nodes); // Create InternetStack InternetStackHelper stack; // Set IP network address stack.Install(nodes); Ipv4AddressHelper address; // Assign IP to NetDevice address.SetBase(\"10.1.1.0\", \"255.255.255.0\"); Ipv4InterfaceContainer interfaces = address.Assign(devices); // Create echo server UdpEchoServerHelper echoServer(9); // Install echo server to node 1, mark it application, and set start and stop time ApplicationContainer serverApps = echoServer.Install(nodes.Get(1)); serverApps.Start(Seconds(1.0)); serverApps.Stop(Seconds(10.0)); // Create echo client and set its attributes UdpEchoClientHelper echoClient(interfaces.GetAddress(1), 9); echoClient.SetAttribute(\"MaxPackets\", UintegerValue(1)); echoClient.SetAttribute(\"Interval\", TimeValue(Seconds(1.0))); echoClient.SetAttribute(\"PacketSize\", UintegerValue(1024)); // Install echo client to node 0, mark it application, and set start and stop time ApplicationContainer clientApps = echoClient.Install(nodes.Get(0)); clientApps.Start(Seconds(2.0)); clientApps.Stop(Seconds(10.0)); AsciiTraceHelper ascii; pointToPoint.EnableAsciiAll (ascii.CreateFileStream (\u201dmyfirst.tr\u201d)); Simulator::Run(); Simulator::Destroy(); return 0;","title":"Examples"},{"location":"ns3/#third-class","text":"","title":"Third Class"},{"location":"ns3/#class-code_2","text":"#include \"ns3/core-module.h\" #include \"ns3/network-module.h\" #include \"ns3/csma-module.h\" #include \"ns3/internet-module.h\" #include \"ns3/point-to-point-module.h\" #include \"ns3/applications-module.h\" #include \"ns3/ipv4-global-routing-helper.h\" // Default Network Topology // // 10.1.1.0 // n0 -------------- n1 n2 n3 n4 // point-to-point | | | | // ================ // LAN 10.1.2.0 using namespace ns3; NS_LOG_COMPONENT_DEFINE (\"SecondScriptExample\"); int main (int argc, char *argv[]) { bool verbose = true; uint32_t nCsma = 3; CommandLine cmd (__FILE__); cmd.AddValue (\"nCsma\", \"Number of \\\"extra\\\" CSMA nodes/devices\", nCsma); cmd.AddValue (\"verbose\", \"Tell echo applications to log if true\", verbose); cmd.Parse (argc,argv); if (verbose) { LogComponentEnable (\"UdpEchoClientApplication\", LOG_LEVEL_INFO); LogComponentEnable (\"UdpEchoServerApplication\", LOG_LEVEL_INFO); } nCsma = nCsma == 0 ? 1 : nCsma; NodeContainer p2pNodes; p2pNodes.Create (2); NodeContainer csmaNodes; csmaNodes.Add (p2pNodes.Get (1)); csmaNodes.Create (nCsma); PointToPointHelper pointToPoint; pointToPoint.SetDeviceAttribute (\"DataRate\", StringValue (\"5Mbps\")); pointToPoint.SetChannelAttribute (\"Delay\", StringValue (\"2ms\")); NetDeviceContainer p2pDevices; p2pDevices = pointToPoint.Install (p2pNodes); CsmaHelper csma; csma.SetChannelAttribute (\"DataRate\", StringValue (\"100Mbps\")); csma.SetChannelAttribute (\"Delay\", TimeValue (NanoSeconds (6560))); NetDeviceContainer csmaDevices; csmaDevices = csma.Install (csmaNodes); InternetStackHelper stack; stack.Install (p2pNodes.Get (0)); stack.Install (csmaNodes); Ipv4AddressHelper address; address.SetBase (\"10.1.1.0\", \"255.255.255.0\"); Ipv4InterfaceContainer p2pInterfaces; p2pInterfaces = address.Assign (p2pDevices); address.SetBase (\"10.1.2.0\", \"255.255.255.0\"); Ipv4InterfaceContainer csmaInterfaces; csmaInterfaces = address.Assign (csmaDevices); UdpEchoServerHelper echoServer (9); ApplicationContainer serverApps = echoServer.Install (csmaNodes.Get (nCsma)); serverApps.Start (Seconds (1.0)); serverApps.Stop (Seconds (10.0)); UdpEchoClientHelper echoClient (csmaInterfaces.GetAddress (nCsma), 9); echoClient.SetAttribute (\"MaxPackets\", UintegerValue (1)); echoClient.SetAttribute (\"Interval\", TimeValue (Seconds (1.0))); echoClient.SetAttribute (\"PacketSize\", UintegerValue (1024)); ApplicationContainer clientApps = echoClient.Install (p2pNodes.Get (0)); clientApps.Start (Seconds (2.0)); clientApps.Stop (Seconds (10.0)); Ipv4GlobalRoutingHelper::PopulateRoutingTables (); pointToPoint.EnablePcapAll (\"second\"); csma.EnablePcap (\"second\", csmaDevices.Get (1), true); Simulator::Run (); Simulator::Destroy (); return 0; } QUESTIONS What are nCsma and verbose for? How can we set DataRate and Delay for CSMA channel? How can we set routing functionality? How can we enable pcap logging for specific devices? How can we set a promiscuos mode and why do we need it?","title":"Class Code"},{"location":"ns3_examples/","text":"NS3 comparison graphs. Python code used to generate all the codes. import os import shutil output_folder = 'opt' name = \"custom\" packetSizes = [\"512\", \"1024\", \"2048\", \"4096\", \"8192\", \"16384\", \"8192\", \"16384\"] packetDelays = [\"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", \"6.0\", \"7.0\", \"8.0\"] dataLinkRates = [\"5Mbps\", \"4Mbps\", \"3Mbps\", \"2Mbps\", \"1Mbps\"] dataLinkDelays = [\"1ms\", \"2ms\", \"3ms\", \"4ms\", \"5ms\"] try: shutil.rmtree(output_folder) except: pass os.mkdir(output_folder) for packetSize in packetSizes: for packetDelay in packetDelays: for dataLinkRate in dataLinkRates: for dataLinkDelay in dataLinkDelays: initial_str = f\"\"\"#include \"ns3/core-module.h\" #include \"ns3/network-module.h\" #include \"ns3/internet-module.h\" #include \"ns3/point-to-point-module.h\" #include \"ns3/applications-module.h\" using namespace ns3; // Log Component NS_LOG_COMPONENT_DEFINE(\"FirstScrpitExample\"); int main() {{ // Change Parameters. auto packetSize = UintegerValue({packetSize}); auto packetDelay = TimeValue(Seconds({packetDelay})); auto dataLinkRate = \"{dataLinkRate}\"; auto dataLinkDelay = \"{dataLinkDelay}\"; // Set Time Resolution Time::SetResolution(Time::NS); // Enable Log Components and set Log levels LogComponentEnable(\"UdpEchoClientApplication\", LOG_LEVEL_INFO); LogComponentEnable(\"UdpEchoServerApplication\", LOG_LEVEL_INFO); // Node Container NodeContainer nodes; nodes.Create(2); // Create Channel PointToPointHelper pointToPoint; pointToPoint.SetDeviceAttribute(\"DataRate\", StringValue(dataLinkRate)); pointToPoint.SetChannelAttribute(\"Delay\", StringValue(dataLinkDelay)); // Create Net Device and bind them to Channel NetDeviceContainer devices; devices = pointToPoint.Install(nodes); // Create InternetStack InternetStackHelper stack; // Set IP network address stack.Install(nodes); Ipv4AddressHelper address; // Assign IP to NetDevice address.SetBase(\"10.1.1.0\", \"255.255.255.0\"); Ipv4InterfaceContainer interfaces = address.Assign(devices); // Create echo server UdpEchoServerHelper echoServer(9); // Install echo server to node 1, mark it application, and set start and stop time ApplicationContainer serverApps = echoServer.Install(nodes.Get(1)); serverApps.Start(Seconds(1.0)); serverApps.Stop(Seconds(10.0)); // Create echo client and set its attributes UdpEchoClientHelper echoClient(interfaces.GetAddress(1), 9); echoClient.SetAttribute(\"MaxPackets\", UintegerValue(1)); echoClient.SetAttribute(\"Interval\", packetDelay); echoClient.SetAttribute(\"PacketSize\", packetSize); // Install echo client to node 0, mark it application, and set start and stop time ApplicationContainer clientApps = echoClient.Install(nodes.Get(0)); clientApps.Start(Seconds(2.0)); clientApps.Stop(Seconds(10.0)); Simulator::Run(); Simulator::Destroy(); return 0; }} \"\"\" with open(f'{output_folder}/{name}_{packetSize}_{packetDelay.replace(\".0\", \"\")}_{dataLinkRate}_{dataLinkDelay}.cc', 'w') as f: f.write(initial_str) Graphing Code import matplotlib.pyplot as plt endTime = [2.02686, 2.01843, 2.01562, 2.01422, 2.01337] startTime = [2.01343, 2.00922, 2.00781, 2.00711, 2.00669] totalTime = [] for i in range(len(endTime)): totalTime.append(endTime[i] - startTime[i]) X = [\"1Mbps\", \"2Mbps\", \"3Mbps\", \"4Mbps\", \"5Mbps\"] plt.plot(X, totalTime) plt.show()","title":"NS3_Examples"},{"location":"ns3_examples/#ns3-comparison-graphs","text":"","title":"NS3 comparison graphs."},{"location":"ns3_examples/#python-code-used-to-generate-all-the-codes","text":"import os import shutil output_folder = 'opt' name = \"custom\" packetSizes = [\"512\", \"1024\", \"2048\", \"4096\", \"8192\", \"16384\", \"8192\", \"16384\"] packetDelays = [\"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\", \"6.0\", \"7.0\", \"8.0\"] dataLinkRates = [\"5Mbps\", \"4Mbps\", \"3Mbps\", \"2Mbps\", \"1Mbps\"] dataLinkDelays = [\"1ms\", \"2ms\", \"3ms\", \"4ms\", \"5ms\"] try: shutil.rmtree(output_folder) except: pass os.mkdir(output_folder) for packetSize in packetSizes: for packetDelay in packetDelays: for dataLinkRate in dataLinkRates: for dataLinkDelay in dataLinkDelays: initial_str = f\"\"\"#include \"ns3/core-module.h\" #include \"ns3/network-module.h\" #include \"ns3/internet-module.h\" #include \"ns3/point-to-point-module.h\" #include \"ns3/applications-module.h\" using namespace ns3; // Log Component NS_LOG_COMPONENT_DEFINE(\"FirstScrpitExample\"); int main() {{ // Change Parameters. auto packetSize = UintegerValue({packetSize}); auto packetDelay = TimeValue(Seconds({packetDelay})); auto dataLinkRate = \"{dataLinkRate}\"; auto dataLinkDelay = \"{dataLinkDelay}\"; // Set Time Resolution Time::SetResolution(Time::NS); // Enable Log Components and set Log levels LogComponentEnable(\"UdpEchoClientApplication\", LOG_LEVEL_INFO); LogComponentEnable(\"UdpEchoServerApplication\", LOG_LEVEL_INFO); // Node Container NodeContainer nodes; nodes.Create(2); // Create Channel PointToPointHelper pointToPoint; pointToPoint.SetDeviceAttribute(\"DataRate\", StringValue(dataLinkRate)); pointToPoint.SetChannelAttribute(\"Delay\", StringValue(dataLinkDelay)); // Create Net Device and bind them to Channel NetDeviceContainer devices; devices = pointToPoint.Install(nodes); // Create InternetStack InternetStackHelper stack; // Set IP network address stack.Install(nodes); Ipv4AddressHelper address; // Assign IP to NetDevice address.SetBase(\"10.1.1.0\", \"255.255.255.0\"); Ipv4InterfaceContainer interfaces = address.Assign(devices); // Create echo server UdpEchoServerHelper echoServer(9); // Install echo server to node 1, mark it application, and set start and stop time ApplicationContainer serverApps = echoServer.Install(nodes.Get(1)); serverApps.Start(Seconds(1.0)); serverApps.Stop(Seconds(10.0)); // Create echo client and set its attributes UdpEchoClientHelper echoClient(interfaces.GetAddress(1), 9); echoClient.SetAttribute(\"MaxPackets\", UintegerValue(1)); echoClient.SetAttribute(\"Interval\", packetDelay); echoClient.SetAttribute(\"PacketSize\", packetSize); // Install echo client to node 0, mark it application, and set start and stop time ApplicationContainer clientApps = echoClient.Install(nodes.Get(0)); clientApps.Start(Seconds(2.0)); clientApps.Stop(Seconds(10.0)); Simulator::Run(); Simulator::Destroy(); return 0; }} \"\"\" with open(f'{output_folder}/{name}_{packetSize}_{packetDelay.replace(\".0\", \"\")}_{dataLinkRate}_{dataLinkDelay}.cc', 'w') as f: f.write(initial_str)","title":"Python code used to generate all the codes."},{"location":"ns3_examples/#graphing-code","text":"import matplotlib.pyplot as plt endTime = [2.02686, 2.01843, 2.01562, 2.01422, 2.01337] startTime = [2.01343, 2.00922, 2.00781, 2.00711, 2.00669] totalTime = [] for i in range(len(endTime)): totalTime.append(endTime[i] - startTime[i]) X = [\"1Mbps\", \"2Mbps\", \"3Mbps\", \"4Mbps\", \"5Mbps\"] plt.plot(X, totalTime) plt.show()","title":"Graphing Code"},{"location":"sumo/","text":"This documentation is created for the purpose of helping new learners learn about SUMO and its uses. Environment Setup All Necessary Installs Make sure to have SUMO installed! If you do not have SUMO installed, please check this Install Instruction For some parts you will also need NS3. If you do not have NS3 installed, please check this Install Instruction Generating Scenario For this tutorial, we shall be using Open Street Map. We have osmWebWizard.py python file that will help us generate sumo files from Open Street map. cd ~/repos/sumo/tools python osmWebWizard.py First make sure to check the area. Select necessary options, i.e., how many cars, how many trucks etc, and their traffic factor. After all that choose Generate Scenario This should open SUMO GUI. You can check to make sure the roads are rendered properly and hace option you can use to run the scenario. While running you can check Network Parameters. Insude your sumo/tools folder a new folder should be created which will have the name and date of when you generated the scenario. Example: 2022-08-06-03-16-40-12 Go inside that folder and find os.sumocfg . Run the command sumo -c osm.sumocfg -- fcd-output vanettrace.xml","title":"SUMO"},{"location":"sumo/#environment-setup","text":"","title":"Environment Setup"},{"location":"sumo/#all-necessary-installs","text":"","title":"All Necessary Installs"},{"location":"sumo/#make-sure-to-have-sumo-installed","text":"If you do not have SUMO installed, please check this Install Instruction","title":"Make sure to have SUMO installed!"},{"location":"sumo/#for-some-parts-you-will-also-need-ns3","text":"If you do not have NS3 installed, please check this Install Instruction","title":"For some parts you will also need NS3."},{"location":"sumo/#generating-scenario","text":"For this tutorial, we shall be using Open Street Map. We have osmWebWizard.py python file that will help us generate sumo files from Open Street map. cd ~/repos/sumo/tools python osmWebWizard.py First make sure to check the area. Select necessary options, i.e., how many cars, how many trucks etc, and their traffic factor. After all that choose Generate Scenario This should open SUMO GUI. You can check to make sure the roads are rendered properly and hace option you can use to run the scenario. While running you can check Network Parameters. Insude your sumo/tools folder a new folder should be created which will have the name and date of when you generated the scenario. Example: 2022-08-06-03-16-40-12 Go inside that folder and find os.sumocfg . Run the command sumo -c osm.sumocfg -- fcd-output vanettrace.xml","title":"Generating Scenario"}]}